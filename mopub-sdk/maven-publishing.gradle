apply plugin: 'maven-publish'

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            // The javadoc task in Java 8 is too strict and throws unnecessary syntax errors
            // if our comments fail to abide by the new standard.
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar

    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task)
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = project.ext.displayName
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile

        options {
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "https://developer.android.com/reference","${android.sdkDirectory}/docs/reference"
        }

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
        classifier = 'javadoc'
        from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

publishing {
    repositories {
        maven {
            url project.ext.mavenProperties.mavenPublishingUrl
            credentials {
                username project.ext.mavenProperties.mavenPublishingUsername
                password project.ext.mavenProperties.mavenPublishingPassword
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version = project.version

            artifact bundleRelease
            //artifact javadocReleaseJar      // used in this project instead of androidJavadocJar
            artifact androidSourcesJar

            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')

                ext.addDependency = { Dependency dep, String scope ->
//                    if (dep instanceof ProjectDependency) {
//                        def depGroup = dep.dependencyProject.group
//                        def depName = dep.dependencyProject.name
//                        def depVersion = dep.dependencyProject.version
//                    } else if (dep instanceof ModuleDependency) {
//                        def depGroup = dep.group
//                        def depName = dep.name
//                        def depVersion = dep.version
//                    } else {
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return // ignore invalid dependencies

                        def depGroup = dep.group
                        def depName = dep.name
                        def depVersion = dep.version
                    //}

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', depGroup)
                    dependencyNode.appendNode('artifactId', depName)
                    dependencyNode.appendNode('version', depVersion)
                    dependencyNode.appendNode('scope', scope)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                // List all "compile" dependencies (for old Gradle)
                configurations.compile.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "api" dependencies (for new Gradle) as "compile" dependencies
                configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }
}